package com.qvantel.poc.qvantelPoc.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.qvantel.poc.qvantelPoc.exception.ResourceNotFoundException;
import com.qvantel.poc.qvantelPoc.model.customer;
import com.qvantel.poc.qvantelPoc.repository.customerRepository;

@RestController
@RequestMapping("/Qvantel/RestDemo")
public class customerController {

	@Autowired
	private customerRepository customRepo;

	@GetMapping("/customers")
	public List<customer> getAllCustomers() {
		return customRepo.findAll();

	}

	@GetMapping("/customers/{id}")
	public ResponseEntity<customer> getEmployeeById(@PathVariable(value = "id") Long id)
			throws ResourceNotFoundException {
		customer customer = customRepo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("customer  not found for this id :: " + id));
		return ResponseEntity.ok().body(customer);
	}

	@PostMapping("/customers")
	public customer createEmployee(@Valid @RequestBody customer customer) {
		return customRepo.save(customer);
	}

	@PutMapping("/customers/{id}")
	public ResponseEntity<customer> updateCustomer(@PathVariable(value = "id") Long id,
			@Valid @RequestBody customer customerDetails) throws ResourceNotFoundException {
		customer customer = customRepo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("customer not found for this id :: " + id));

		customer.setCustomerName(customerDetails.getCustomerName());
		customer.setPhNum(customerDetails.getPhNum());
		customer.setSimNumber(customerDetails.getSimNumber());
		customer.setStatus(customerDetails.getStatus());
		final customer updatedCustomer = customRepo.save(customer);
		return ResponseEntity.ok(updatedCustomer);
	}

	@DeleteMapping("/customers/{id}")
	public Map<String, Boolean> deleteCustomer(@PathVariable(value = "id") Long customerId)
			throws ResourceNotFoundException {
		customer customer = customRepo.findById(customerId)
				.orElseThrow(() -> new ResourceNotFoundException("customer not found for this id :: " + customerId));

		customRepo.delete(customer);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	}
}
